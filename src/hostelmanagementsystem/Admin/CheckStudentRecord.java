/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hostelmanagementsystem.Admin;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import java.util.logging.Level;
import javax.swing.DefaultCellEditor;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Daniel
 */
public class CheckStudentRecord extends javax.swing.JFrame implements FilesLocation {

    ImageIcon wi = new ImageIcon("thelogo.jpg");
    private UserSession userSession;

    /**
     * Creates new form CheckStudentRecord
     */
    public CheckStudentRecord(UserSession userSession) {

        //Define User Session
        this.userSession = userSession;

        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);

        //Window itself
        this.setSize(1350, 670);
        this.setIconImage(wi.getImage());
        this.setTitle("Admin CRUD HRI | XYZ Hostel Management");

        // Window when close
        this.setDefaultCloseOperation(LandingPage.EXIT_ON_CLOSE);
        this.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblCRUDtitle = new javax.swing.JLabel();
        jSplitPaneBackExit = new javax.swing.JSplitPane();
        btnBackCSR = new javax.swing.JButton();
        btnExitCSR = new javax.swing.JButton();
        lblCRUDtitle1 = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        btnSaveVAI = new javax.swing.JButton();
        lblCRUDtitle2 = new javax.swing.JLabel();
        btnDisplayVAI = new javax.swing.JButton();
        btnResetVAI = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        btnSearchFS = new javax.swing.JButton();
        btnClearFS = new javax.swing.JButton();
        btnResetFS = new javax.swing.JButton();
        txtStudentID = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        lblCRUDtitle3 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSPI = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableSBHI = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1200, 670));
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(102, 192, 244));
        jPanel1.setForeground(new java.awt.Color(102, 192, 244));
        jPanel1.setLayout(null);

        lblCRUDtitle.setFont(new java.awt.Font("Kanit Medium", 0, 18)); // NOI18N
        lblCRUDtitle.setForeground(new java.awt.Color(27, 40, 56));
        lblCRUDtitle.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblCRUDtitle.setText("View & Display All Historical Records of Students Such As: ");
        lblCRUDtitle.setName("AdminHRI"); // NOI18N
        jPanel1.add(lblCRUDtitle);
        lblCRUDtitle.setBounds(60, 90, 760, 40);

        jSplitPaneBackExit.setDividerLocation(140);
        jSplitPaneBackExit.setDividerSize(15);

        btnBackCSR.setFont(new java.awt.Font("Dubai", 3, 18)); // NOI18N
        btnBackCSR.setText("Back");
        btnBackCSR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackCSRActionPerformed(evt);
            }
        });
        jSplitPaneBackExit.setLeftComponent(btnBackCSR);

        btnExitCSR.setFont(new java.awt.Font("Dubai", 3, 18)); // NOI18N
        btnExitCSR.setText("Exit");
        btnExitCSR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitCSRActionPerformed(evt);
            }
        });
        jSplitPaneBackExit.setRightComponent(btnExitCSR);

        jPanel1.add(jSplitPaneBackExit);
        jSplitPaneBackExit.setBounds(870, 40, 290, 50);

        lblCRUDtitle1.setFont(new java.awt.Font("Kanit SemiBold", 0, 48)); // NOI18N
        lblCRUDtitle1.setForeground(new java.awt.Color(255, 255, 255));
        lblCRUDtitle1.setText("Check Student Records");
        lblCRUDtitle1.setName("AdminHRI"); // NOI18N
        jPanel1.add(lblCRUDtitle1);
        lblCRUDtitle1.setBounds(50, 50, 520, 40);

        jTabbedPane2.setBackground(new java.awt.Color(42, 71, 94));

        jPanel2.setBackground(new java.awt.Color(42, 71, 94));
        jPanel2.setLayout(null);

        btnSaveVAI.setFont(new java.awt.Font("Kanit Medium", 2, 18)); // NOI18N
        btnSaveVAI.setText("Save All Table Information");
        btnSaveVAI.setToolTipText("All The Info Will Display On The Table");
        btnSaveVAI.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSaveVAI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveVAIActionPerformed(evt);
            }
        });
        jPanel2.add(btnSaveVAI);
        btnSaveVAI.setBounds(50, 180, 320, 60);

        lblCRUDtitle2.setFont(new java.awt.Font("Kanit SemiBold", 0, 36)); // NOI18N
        lblCRUDtitle2.setForeground(new java.awt.Color(255, 255, 255));
        lblCRUDtitle2.setText("View All Info");
        lblCRUDtitle2.setName("AdminHRI"); // NOI18N
        jPanel2.add(lblCRUDtitle2);
        lblCRUDtitle2.setBounds(50, 40, 310, 40);

        btnDisplayVAI.setFont(new java.awt.Font("Kanit Medium", 2, 18)); // NOI18N
        btnDisplayVAI.setText("Display All Table Information");
        btnDisplayVAI.setToolTipText("All The Info Will Display On The Table");
        btnDisplayVAI.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDisplayVAI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayVAIActionPerformed(evt);
            }
        });
        jPanel2.add(btnDisplayVAI);
        btnDisplayVAI.setBounds(50, 110, 320, 60);

        btnResetVAI.setFont(new java.awt.Font("Kanit Medium", 2, 18)); // NOI18N
        btnResetVAI.setText("Reset All Table Information");
        btnResetVAI.setToolTipText("All The Info Will Display On The Table");
        btnResetVAI.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnResetVAI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetVAIActionPerformed(evt);
            }
        });
        jPanel2.add(btnResetVAI);
        btnResetVAI.setBounds(50, 250, 320, 60);

        jTabbedPane2.addTab("Setting 1", jPanel2);

        jPanel3.setBackground(new java.awt.Color(42, 71, 94));
        jPanel3.setToolTipText("Reset Everything");
        jPanel3.setLayout(null);

        btnSearchFS.setFont(new java.awt.Font("Kanit Medium", 2, 18)); // NOI18N
        btnSearchFS.setText("Search");
        btnSearchFS.setToolTipText("Search Student ID");
        btnSearchFS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearchFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchFSActionPerformed(evt);
            }
        });
        jPanel3.add(btnSearchFS);
        btnSearchFS.setBounds(50, 260, 113, 47);

        btnClearFS.setFont(new java.awt.Font("Kanit Medium", 2, 18)); // NOI18N
        btnClearFS.setText("Clear");
        btnClearFS.setToolTipText("Clear Stuffs");
        btnClearFS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnClearFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearFSActionPerformed(evt);
            }
        });
        jPanel3.add(btnClearFS);
        btnClearFS.setBounds(190, 190, 113, 47);

        btnResetFS.setFont(new java.awt.Font("Kanit Medium", 2, 18)); // NOI18N
        btnResetFS.setText("Reset");
        btnResetFS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnResetFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetFSActionPerformed(evt);
            }
        });
        jPanel3.add(btnResetFS);
        btnResetFS.setBounds(50, 190, 113, 47);

        txtStudentID.setFont(new java.awt.Font("Dubai", 1, 18)); // NOI18N
        txtStudentID.setText("Enter Student ID");
        txtStudentID.setToolTipText("Enter Room Number");
        txtStudentID.setMinimumSize(new java.awt.Dimension(1020, 855));
        txtStudentID.setPreferredSize(new java.awt.Dimension(1020, 855));
        txtStudentID.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtStudentIDMouseClicked(evt);
            }
        });
        txtStudentID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStudentIDActionPerformed(evt);
            }
        });
        jPanel3.add(txtStudentID);
        txtStudentID.setBounds(170, 120, 160, 30);

        jLabel8.setFont(new java.awt.Font("Dubai", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Student ID:");
        jPanel3.add(jLabel8);
        jLabel8.setBounds(50, 120, 100, 30);

        lblCRUDtitle3.setFont(new java.awt.Font("Kanit SemiBold", 0, 36)); // NOI18N
        lblCRUDtitle3.setForeground(new java.awt.Color(255, 255, 255));
        lblCRUDtitle3.setText("Find Student");
        lblCRUDtitle3.setName("AdminHRI"); // NOI18N
        jPanel3.add(lblCRUDtitle3);
        lblCRUDtitle3.setBounds(50, 40, 310, 40);

        jTabbedPane2.addTab("Setting 2", jPanel3);

        jPanel1.add(jTabbedPane2);
        jTabbedPane2.setBounds(790, 120, 410, 370);

        jTabbedPane1.setBackground(new java.awt.Color(42, 71, 94));

        tableSPI.setFont(new java.awt.Font("Dubai", 0, 14)); // NOI18N
        tableSPI.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student ID", "Age", "Date of Birth", "Home Address", "State", "Zipcode", "Course ", "Intake"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableSPI);

        jTabbedPane1.addTab("Student Personal Information", jScrollPane1);

        tableSBHI.setFont(new java.awt.Font("Dubai", 0, 14)); // NOI18N
        tableSBHI.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student ID", "Name", "RoomID", "RoomType", "RoomPrice", "PaymentStatus", "PaymentDate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableSBHI);

        jTabbedPane1.addTab("Student Book Hostel Information", jScrollPane2);

        jPanel1.add(jTabbedPane1);
        jTabbedPane1.setBounds(60, 130, 690, 360);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1370, 680);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackCSRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackCSRActionPerformed
        UserSession userSession = new UserSession("admin"); // Create UserSession instance with username
        AdminMainMenu amm = new AdminMainMenu(userSession);
        amm.setLocationRelativeTo(null);
        amm.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnBackCSRActionPerformed

    private void btnExitCSRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitCSRActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnExitCSRActionPerformed

    private void txtStudentIDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtStudentIDMouseClicked
        txtStudentID.setText(" ");
    }//GEN-LAST:event_txtStudentIDMouseClicked

    private void txtStudentIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStudentIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStudentIDActionPerformed

    private void btnSaveVAIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveVAIActionPerformed
        String extraInfoFilePath = "Extrainformation.txt";
        try ( BufferedWriter bw = new BufferedWriter(new FileWriter(extraInfoFilePath))) {
            DefaultTableModel model = (DefaultTableModel) tableSPI.getModel();
            int rowCount = model.getRowCount();
            int columnCount = model.getColumnCount();

            for (int row = 0; row < rowCount; row++) {
                for (int col = 0; col < columnCount; col++) {
                    String value = (String) model.getValueAt(row, col);
                    bw.write(value);

                    if (col < columnCount - 1) {
                        bw.write("|");
                    }
                }

                bw.newLine();
            }

            bw.close(); // Close the BufferedWriter after writing

            // Display saved data in a JOptionPane dialog
            StringBuilder sb = new StringBuilder();
            for (int row = 0; row < rowCount; row++) {
                for (int col = 0; col < columnCount; col++) {
                    String value = (String) model.getValueAt(row, col);
                    sb.append(value);

                    if (col < columnCount - 1) {
                        sb.append("|");
                    }
                }

                sb.append("\n");
            }

            JOptionPane.showMessageDialog(null, "Data saved:\n" + sb.toString());

            // Print saved data to the console
            System.out.println("Data saved:");
            System.out.println(sb.toString());

        } catch (IOException e) {
            e.printStackTrace();
        }

        String paymentDetailsFilePath = "PaymentDetails.txt";
        try ( BufferedWriter bw = new BufferedWriter(new FileWriter(paymentDetailsFilePath))) {
            DefaultTableModel model = (DefaultTableModel) tableSBHI.getModel();
            int rowCount = model.getRowCount();
            int columnCount = model.getColumnCount();

            for (int row = 0; row < rowCount; row++) {
                for (int col = 0; col < columnCount; col++) {
                    String value = model.getValueAt(row, col).toString();
                    bw.write(value);

                    if (col < columnCount - 1) {
                        bw.write("|");
                    }
                }

                bw.newLine();
            }

            bw.close(); // Close the BufferedWriter after writing

            // Display saved data in a JOptionPane dialog
            StringBuilder sb = new StringBuilder();
            for (int row = 0; row < rowCount; row++) {
                for (int col = 0; col < columnCount; col++) {
                    String value = model.getValueAt(row, col).toString();
                    sb.append(value);

                    if (col < columnCount - 1) {
                        sb.append("|");
                    }
                }

                sb.append("\n");
            }

            JOptionPane.showMessageDialog(null, "Data saved:\n" + sb.toString());

            // Print saved data to the console
            System.out.println("Data saved:");
            System.out.println(sb.toString());

        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSaveVAIActionPerformed

    private void btnDisplayVAIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisplayVAIActionPerformed
        // Clear the existing table data
        DefaultTableModel modelSPI = (DefaultTableModel) tableSPI.getModel();
        modelSPI.setRowCount(0);

        // Read the data from the "Extrainformation.txt" file and populate the table
        String extrainformationFilePath = "Extrainformation.txt";
        try ( BufferedReader br = new BufferedReader(new FileReader(extrainformationFilePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                // Split the line using the '|' delimiter
                String[] data = line.split("\\|");

                // Add the data to the table model
                modelSPI.addRow(data);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Clear the existing table data in the second table
        DefaultTableModel modelSBHI = (DefaultTableModel) tableSBHI.getModel();
        modelSBHI.setRowCount(0);

        // Read the data from the "FormSub.txt" file and populate the second table
        String formSubFilePath = "FormSub.txt";
        try ( BufferedReader br = new BufferedReader(new FileReader(formSubFilePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                // Split the line using the '|' delimiter
                String[] data = line.split("\\|");

                // Extract the desired data for display
                String studentID = data[0];
                String name = data[1];
                String roomNumber = data[10];
                String roomType = data[11];
                String roomPrice = data[12];
                String paymentStatus = data[13];
                String paymentDate = data[14];

                // Exclude rows with "pending" payment status
                if (!paymentStatus.equalsIgnoreCase("pending")) {
                    // Add the extracted data to the second table model
                    modelSBHI.addRow(new Object[]{studentID, name, roomNumber, roomType, roomPrice, paymentStatus, paymentDate});
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnDisplayVAIActionPerformed


    private void btnSearchFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchFSActionPerformed
        String studentID = txtStudentID.getText().trim().toUpperCase();
        if (studentID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please input Student ID here.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            boolean idFound = display(studentID);
            boolean idFound2 = display2(studentID);

            if (idFound && idFound2) {
                JOptionPane.showMessageDialog(this, "Student ID Found in both tables.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else if (idFound) {
                JOptionPane.showMessageDialog(this, "Student ID Found in Student Personal Information.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else if (idFound2) {
                JOptionPane.showMessageDialog(this, "Student ID Found in Student Book Hostel Information.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Student ID Not found. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Error reading file.", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(CheckStudentRecord.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSearchFSActionPerformed

    private void btnClearFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearFSActionPerformed
        int selectedRow = tableSPI.getSelectedRow();
        int selectedRow2 = tableSBHI.getSelectedRow();

        if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel) tableSPI.getModel();
            model.removeRow(selectedRow);
        } else if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel) tableSBHI.getModel();
            model.removeRow(selectedRow2);
        }
    }//GEN-LAST:event_btnClearFSActionPerformed

    private void btnResetFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetFSActionPerformed
        txtStudentID.setText(" ");

        // The Tables
        DefaultTableModel model = (DefaultTableModel) tableSPI.getModel();
        model.setRowCount(0);

        DefaultTableModel model2 = (DefaultTableModel) tableSBHI.getModel();
        model2.setRowCount(0);
    }//GEN-LAST:event_btnResetFSActionPerformed

    private void btnResetVAIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetVAIActionPerformed
        DefaultTableModel model = (DefaultTableModel) tableSPI.getModel();
        model.setRowCount(0);

        DefaultTableModel model2 = (DefaultTableModel) tableSBHI.getModel();
        model2.setRowCount(0);

        txtStudentID.setText(" ");
    }//GEN-LAST:event_btnResetVAIActionPerformed

    public boolean display(String studentID) throws FileNotFoundException {
        DefaultTableModel model = (DefaultTableModel) tableSPI.getModel();

        // Preserve the table headers
        String[] columnIdentifiers = new String[model.getColumnCount()];
        for (int i = 0; i < model.getColumnCount(); i++) {
            columnIdentifiers[i] = model.getColumnName(i);
        }

        model.setRowCount(0); // Clear the existing rows
        model.setColumnCount(0); // Clear the existing columns

        handleFiles file = new handleFiles("Extrainformation.txt");
        Object[] fileData = file.reader();

        boolean idFound = false;

        // Set the preserved table headers
        for (String columnName : columnIdentifiers) {
            model.addColumn(columnName);
        }

        for (Object data : fileData) {
            String line = data.toString().trim();
            String[] dataRow = line.split("\\|");

            if (dataRow.length > 0 && dataRow[0].equals(studentID)) {
                model.addRow(dataRow);
                idFound = true;
                break; // Assuming student IDs are unique, we can exit the loop once a match is found
            }
        }

        return idFound;
    }

    public boolean display2(String studentID) throws FileNotFoundException {
        DefaultTableModel model = (DefaultTableModel) tableSBHI.getModel();
        model.setRowCount(0); // Clear the existing rows

        handleFiles file = new handleFiles("FormSub.txt");
        Object[] fileData = file.reader();

        boolean idFound2 = false;

        for (Object data : fileData) {
            String line = data.toString().trim();
            String[] dataRow = line.split("\\|");

            if (dataRow.length > 0 && dataRow[0].equals(studentID)) {
                // Extract the desired columns from dataRow
                String studentIDValue = dataRow[0];
                String name = dataRow[1];
                String roomID = dataRow[10];
                String roomType = dataRow[11];
                String roomPrice = dataRow[12];
                String paymentStatus = dataRow[13];
                String paymentDate = dataRow[14];

                // Add the selected columns to the table model
                model.addRow(new Object[]{studentIDValue, name, roomID, roomType, roomPrice, paymentStatus, paymentDate});

                idFound2 = true;
            }
        }

        return idFound2;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckStudentRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckStudentRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckStudentRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckStudentRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                UserSession userSession = new UserSession("admin"); // Create UserSession instance with username
                new CheckStudentRecord(userSession).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBackCSR;
    private javax.swing.JButton btnClearFS;
    private javax.swing.JButton btnDisplayVAI;
    private javax.swing.JButton btnExitCSR;
    private javax.swing.JButton btnResetFS;
    private javax.swing.JButton btnResetVAI;
    private javax.swing.JButton btnSaveVAI;
    private javax.swing.JButton btnSearchFS;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPaneBackExit;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel lblCRUDtitle;
    private javax.swing.JLabel lblCRUDtitle1;
    private javax.swing.JLabel lblCRUDtitle2;
    private javax.swing.JLabel lblCRUDtitle3;
    private javax.swing.JTable tableSBHI;
    private javax.swing.JTable tableSPI;
    private javax.swing.JTextField txtStudentID;
    // End of variables declaration//GEN-END:variables
}
